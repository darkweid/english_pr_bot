from aiogram.fsm.context import FSMContext
import asyncio, random, json, csv, time

from aiogram import Router, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
# from keyboards.kb_utils import create_inline_kb, create_reply_kb
from keyboards.keyboards import (kb_training_or_new_words, kb_training_go, kb_training_in_game, kb_rules)
from states.states import FSMtraining
from files.dicts import (dict_dicts, list_right_answers)
from sqlite_db import create_profile, edit_hw_done, check_hw, dict_hw, update_progress, get_progress, \
    update_last_sentence, get_last_sentence

user_router: Router = Router()
main_dict = {}
done_lst = []
flag = False


@user_router.message(F.text == '[–°–±—Ä–æ—Å–∏—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π]')
async def training_new(message: Message, state: FSMContext):
    await message.answer('–°–±—Ä–æ—à–µ–Ω–æ!')
    await state.clear()


@user_router.message(F.text == ('–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ [–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]'))
async def new_words_pass(message: Message):
    await message.answer(
        f'–ò–∑–≤–∏–Ω–∏, {message.from_user.full_name}, —Ç—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòä')


@user_router.message(Command(commands=["rules"]))
async def process_start_command(message: Message):
    await message.answer(
        f"""–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞\n–†–µ–≥–∏—Å—Ç—Ä –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π/—Å–ª–æ–≤ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.\n–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è ¬´don't¬ª, ¬´it's¬ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–µ —Ñ–æ—Ä–º—ã ¬´do not¬ª, ¬´it is¬ª\n–í –ª—é–±–æ–π –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞–∂–∏–º–∞–π –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–±–∏—Ä–∞–π —á–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è üòä""",
        reply_markup=kb_rules)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start" -
@user_router.message(Command(commands=["start"]), StateFilter(default_state))
@user_router.message(F.text == '–û–∫, –ø–æ–Ω—è—Ç–Ω–æ', StateFilter(default_state))
async def process_start_command(message: Message, state: FSMContext):
    await create_profile(message.from_user.id, message.from_user.username,
                         message.from_user.full_name)
    with open('log.csv', 'a', encoding='utf-8') as log_file:
        log_data = [
            str(message.from_user.id).ljust(16), str(message.from_user.full_name).ljust(20),
            str(message.from_user.username).ljust(15), str(message.from_user.is_bot).ljust(6),
            time.strftime('%H:%M :: %d/%m/%Y'), time.tzname]
        writer = csv.writer(log_file, delimiter=',')
        writer.writerow(log_data)
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç,{message.from_user.full_name}! –Ø –±–æ—Ç –æ—Ç –û–ª–∏ –ü—Ä—É—Å : )
\n–ü–æ–º–æ–≥–∞—é –ª—é–¥—è–º –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
–ü–æ–∫–∞ —á—Ç–æ —É –º–µ–Ω—è –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Äì —Ç—Ä–µ–Ω–∞–∂–µ—Ä –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ
‚Äì –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º —Å–µ–≥–æ–¥–Ω—è ‚¨áÔ∏è""",
                         reply_markup=kb_training_or_new_words)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start" -
@user_router.message(Command(commands=['start']), ~StateFilter(default_state))
@user_router.message(F.text == '–í—ã—Ö–æ–¥', ~StateFilter(default_state))
@user_router.message(F.text == '–û–∫, –ø–æ–Ω—è—Ç–Ω–æ', ~StateFilter(default_state))
async def process_start_command_patron(message: Message, state: FSMContext):
    global flag
    flag = True
    await message.answer(f"""‚¨áÔ∏è –ß–µ–º –∑–∞–π–º—ë–º—Å—è —Å–µ–≥–æ–¥–Ω—è? ‚¨áÔ∏è""",
                         reply_markup=kb_training_or_new_words)
    await create_profile(message.from_user.id, message.from_user.username,
                         message.from_user.full_name)


@user_router.message(
    (F.text == '–¢—Ä–µ–Ω–∞–∂–µ—Ä –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ'),
    StateFilter(default_state))  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def training_new(message: Message, state: FSMContext):
    await message.answer(
        f"""–û–∫–µ–π, –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ: —è –ø–∏—à—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∏—à—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥—É—Ç, –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –ø–æ–¥–≥–ª—è–¥–µ—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑""",
        reply_markup=kb_training_go)
    await state.set_state(FSMtraining.in_process)


# –ö–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –ø—Ä–∞–≤–∏–ª–∞
@user_router.message(F.text == ('–¢—Ä–µ–Ω–∞–∂–µ—Ä –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ'),
                     ~StateFilter(default_state))
@user_router.message(F.text == ('–û–∫, –Ω–∞—á–∏–Ω–∞–µ–º'), ~StateFilter(default_state))
async def training_old(message: Message, state: FSMContext):
    global main_dict, level, word, done_lst, flag
    flag = True
    done_lst = await get_progress(message.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∏–∑ –ë–î
    level = await check_hw(message.from_user.id)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ë–î
    main_dict = dict_dicts[level]  # —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    await message.answer(f"""–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}\n–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {len(done_lst)}\n–í—Å–µ–≥–æ {len(main_dict)}""",
                         reply_markup=ReplyKeyboardRemove())
    word = random.choice(
        [s for s in list(main_dict.values()) if s not in done_lst])
    await message.answer(f'–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n{word}')
    await update_last_sentence(message.from_user.id, word)
    await state.set_state(FSMtraining.in_process)


@user_router.message(F.text == '–ü–æ–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç',
                     StateFilter(FSMtraining.in_process))
async def show_answer(message: Message, state: FSMContext):
    global word
    inv_dict = {value: key for key, value in main_dict.items()}
    await message.answer(inv_dict[word])
    word = random.choice(
        [s for s in list(main_dict.values()) if s not in done_lst])
    await update_last_sentence(message.from_user.id, word)
    await message.answer(
        f'–ù–∞ –æ—à–∏–±–∫–∞—Ö —É—á–∞—Ç—Å—è, —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º üòä\n–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n{word}', reply_markup=ReplyKeyboardRemove())
    await message.answer(f'–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n{word}', reply_markup=ReplyKeyboardRemove())
    await update_last_sentence(message.from_user.id, word)


@user_router.message(StateFilter(FSMtraining.in_process))
async def check_translation(message: Message, state: FSMContext):
    global word, done_lst, main_dict, level, flag
    done_lst = await get_progress(message.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –ë–î

    msg = message.text.lower()
    try:
        if main_dict[msg].lower() == word.lower():
            done_lst.append(word)
            await update_progress(message.from_user.id, done_lst)
            await message.answer(random.choice(list_right_answers))
            if len(done_lst) == len(
                    main_dict
            ):  # –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                await message.answer(
                    '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–µ—Ä–µ–≤–µ–ª –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è!')
                await edit_hw_done(message.from_user.id, dict_hw[level]
                                   )  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–î –∏–Ω—Ñ—É, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –≤—ã–ø–æ–ª–Ω–µ–Ω
                level = await check_hw(message.from_user.id
                                       )  # –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                done_lst = []  # –æ–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                await update_progress(message.from_user.id
                                      )  # –æ–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤ –ë–î
                main_dict = dict_dicts[level]  # –º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
                await message.answer(f"""–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}""")
                word = random.choice(
                    [s for s in list(main_dict.values()) if s not in done_lst])
                await message.answer(f'–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n{word}')
                await update_last_sentence(message.from_user.id, word)
            else:  # –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–µ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ
                word = random.choice([
                    s for s in list(main_dict.values()) if s not in done_lst
                ])  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
                await message.answer(f'–ü–µ—Ä–µ–≤–µ–¥–∏:\n{word}',
                                     reply_markup=ReplyKeyboardRemove())
                await update_last_sentence(message.from_user.id, word)

        else:
            await message.answer(
                '‚ùå –•–º, —É –º–µ–Ω—è –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç ü§î\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç üòâ',
                reply_markup=kb_training_in_game)
    except KeyError:
        if flag == True:
            await message.answer(
                '‚ùå –•–º, —É –º–µ–Ω—è –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç ü§î\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç üòâ',
                reply_markup=kb_training_in_game)
        if flag == False:  # –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            word = await get_last_sentence(message.from_user.id)
            level = await check_hw(message.from_user.id)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ë–î
            main_dict = dict_dicts[level]  # —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
            done_lst = await get_progress(message.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –ë–î
            try:
                if main_dict[message.text.lower()].lower() == word.lower():
                    done_lst.append(word)
                    await update_progress(message.from_user.id, done_lst)
                    await message.answer(random.choice(list_right_answers))
                    word = random.choice([
                        s for s in list(main_dict.values()) if s not in done_lst
                    ])  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
                    await message.answer(f'–ü–µ—Ä–µ–≤–µ–¥–∏:\n{word}',
                                         reply_markup=ReplyKeyboardRemove())
                    flag = True
            except:
                await message.answer(
                    '‚ùå –•–º, —É –º–µ–Ω—è –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç ü§î\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç üòâ',
                    reply_markup=kb_training_in_game)


@user_router.message()
async def send_idontknow(message: Message):
    await message.reply(
        f'{message.from_user.first_name}, —è –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—åü§∑üèº‚Äç‚ôÄ'
    )
