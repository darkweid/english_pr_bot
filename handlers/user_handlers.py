import asyncio, random, json, csv, time

from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from keyboards.keyboards import (kb_main_menu, kb_training_rules_inline, kb_training_or_verbs_or_new_words_inline,
                                 kb_training_in_game_inline, create_inline_kb_words, kb_verbs_rules_inline,
                                 kb_in_verbs_inline, kb_in_verbs_fail_inline)
from states.states import FSMtraining
from files.dicts import (dict_dicts, list_right_answers)
# from files.words import words_dict
from sqlite_db import (create_profile, edit_hw_done, check_hw, dict_hw, update_progress, update_progress_verbs,
                       get_progress, get_progress_verbs, get_or_edit_verbs_level,
                       update_last_sentence, get_last_sentence, update_last_verb, get_last_verb)
from handlers.admin_handlers import send_message_to_admin, bot

user_router: Router = Router()
main_dict = {}
done_lst = []


@user_router.message(F.text == '[–°–±—Ä–æ—Å–∏—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π]')
async def training_new(message: Message, state: FSMContext):
    await message.answer('–°–±—Ä–æ—à–µ–Ω–æ!')
    await state.clear()


@user_router.message(Command(commands=["info"]))
async def process_start_command(message: Message):
    await message.answer(
        f"""\nüü¢–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞
\nüîµ–†–µ–≥–∏—Å—Ç—Ä –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π/—Å–ª–æ–≤ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.
\n‚ùå–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è ¬´don't¬ª, ¬´it's¬ª
‚úÖ–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω—ã–µ —Ñ–æ—Ä–º—ã ¬´do not¬ª, ¬´it is¬ª
\nüü†–í –ª—é–±–æ–π –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞–∂–∏–º–∞–π –∫–æ–º–∞–Ω–¥—É /start –∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è üòä""",
        reply_markup=kb_main_menu)


# üü£üîµüü¢üü°üü†üî¥üü§

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start" –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@user_router.message(Command(commands=["start"]), StateFilter(default_state))
async def process_start_command(message: Message, state: FSMContext):
    await create_profile(message.from_user.id, message.from_user.username,
                         message.from_user.full_name)
    with open('log.csv', 'a', encoding='utf-8') as log_file:
        log_data = [
            str(message.from_user.id).ljust(16), str(message.from_user.full_name).ljust(20),
            str(message.from_user.username).ljust(15), str(message.from_user.is_bot).ljust(6),
            time.strftime('%H:%M :: %d/%m/%Y'), time.tzname]
        writer = csv.writer(log_file, delimiter=',')
        writer.writerow(log_data)
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç,{message.from_user.full_name}! –Ø –±–æ—Ç –æ—Ç –û–ª–∏ –ü—Ä—É—Å : )
\n–ü–æ–º–æ–≥–∞—é –ª—é–¥—è–º –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
–ü–æ–∫–∞ —á—Ç–æ —É –º–µ–Ω—è —Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Äì —Ç—Ä–µ–Ω–∞–∂–µ—Ä –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ
- –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤
‚Äì –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
\nüîªÔ∏è –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º —Å–µ–≥–æ–¥–Ω—è üîª""",
                         reply_markup=kb_training_or_verbs_or_new_words_inline)
    await send_message_to_admin(bot,
                                text=f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n{message.from_user.full_name}\n@{message.from_user.username}')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start" –ø—Ä–∏ –ù–ï—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@user_router.message(Command(commands=['main_menu']), ~StateFilter(default_state))
@user_router.message(Command(commands=['start']), ~StateFilter(default_state))
async def process_start_command_patron(message: Message, state: FSMContext):
    await message.answer(f"""üîª –ß–µ–º –∑–∞–π–º—ë–º—Å—è —Å–µ–≥–æ–¥–Ω—è? üîª""",
                         reply_markup=kb_training_or_verbs_or_new_words_inline)
    await create_profile(message.from_user.id, message.from_user.username,
                         message.from_user.full_name)


@user_router.callback_query(F.data == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', ~StateFilter(default_state))
async def main_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(f"""üîª –ß–µ–º –∑–∞–π–º—ë–º—Å—è —Å–µ–≥–æ–¥–Ω—è? üîª""",
                                     reply_markup=kb_training_or_verbs_or_new_words_inline)


#################################### –¢–†–ï–ù–ê–ñ–ï–† –ü–û –ì–†–ê–ú–ú–ê–¢–ò–ö–ï ####################################
@user_router.callback_query(F.data == '–¢—Ä–µ–Ω–∞–∂–µ—Ä –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ')
async def training_grammar(callback: CallbackQuery, state: FSMContext):
    done_lst = await get_progress(callback.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∏–∑ –ë–î
    level = await check_hw(callback.from_user.id)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ë–î
    main_dict = dict_dicts[level]  # —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    await callback.answer()
    await callback.message.edit_text(
        f'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n–ë—É–¥–µ–º —É–ª—É—á—à–∞—Ç—å —Ç–≤–æ—é <b>–≥—Ä–∞–º–º–∞—Ç–∏–∫—É</b>\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ - –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –ø—Ä–∞–≤–∏–ª–∞',
        reply_markup=kb_training_rules_inline)
    await callback.message.answer(
        f'–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}\n–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {len(done_lst)}\n–í—Å–µ–≥–æ {len(main_dict)}',
        reply_markup=ReplyKeyboardRemove())
    sentence = random.choice(
        [s for s in list(main_dict.values()) if s not in done_lst])
    await callback.message.answer(f'–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n\n{sentence}')
    await update_last_sentence(callback.from_user.id, sentence)
    await state.set_state(FSMtraining.in_process)


@user_router.callback_query(F.data == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞')
async def see_rules_training(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        text='–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ:\n–Ø –ø–∏—à—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∏—à—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.\n\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥—É—Ç:\n‚ö™ –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑\n‚ö™ –ú–æ–∂–µ—à—å –ø–æc–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç¬ª')


@user_router.callback_query(F.data == '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç')
async def show_answer(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    sentence = await get_last_sentence(callback.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ë–î
    level = await check_hw(callback.from_user.id)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ë–î
    main_dict = dict_dicts[level]  # —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    inv_dict = {value: key for key, value in main_dict.items()}
    await callback.message.edit_text(f'–û—Ç–≤–µ—Ç:\n\n{(inv_dict[sentence]).capitalize()}')
    sentence = random.choice(
        [s for s in list(main_dict.values()) if s not in done_lst])
    await update_last_sentence(callback.from_user.id, sentence)
    await callback.message.answer(
        f'–ù–∞ –æ—à–∏–±–∫–∞—Ö —É—á–∞—Ç—Å—è, —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º üòä')
    await callback.message.answer(f'–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n\n{sentence}')


@user_router.message(StateFilter(FSMtraining.in_process))
async def check_translation(message: Message, state: FSMContext):
    sentence = await get_last_sentence(message.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ë–î
    done_lst = await get_progress(message.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –ë–î
    level = await check_hw(message.from_user.id)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ë–î
    main_dict = dict_dicts[level]  # —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    if message.text is not None:
        msg = message.text.lower()
    else:
        msg = ''
    try:
        if main_dict[msg].lower() == sentence.lower():  # –ø–µ—Ä–µ–≤–æ–¥ –≤–µ—Ä–Ω—ã–π
            done_lst.append(sentence)  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª –≤ —Å–ø–∏—Å–æ–∫ done
            await update_progress(message.from_user.id, done_lst)  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤ –ë–î
            await message.answer(random.choice(list_right_answers))  # –ø–∏—à–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–ª–æ–¥–µ—Ü))
            if len(done_lst) == len(
                    main_dict
            ):  # –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                await message.answer(
                    '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–µ—Ä–µ–≤–µ–ª –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è!')
                await edit_hw_done(message.from_user.id, dict_hw[level]
                                   )  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–î –∏–Ω—Ñ—É, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –≤—ã–ø–æ–ª–Ω–µ–Ω
                level = await check_hw(message.from_user.id
                                       )  # –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                done_lst = []  # –æ–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                await update_progress(message.from_user.id
                                      )  # –æ–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤ –ë–î
                main_dict = dict_dicts[level]  # –º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
                await message.answer(f"""–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}""")
                sentence = random.choice(
                    [s for s in list(main_dict.values()) if s not in done_lst])
                await message.answer(f'–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n{sentence}')
                await update_last_sentence(message.from_user.id, sentence)
            else:  # –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–µ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ
                sentence = random.choice([
                    s for s in list(main_dict.values()) if s not in done_lst
                ])  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
                await message.answer(f'–ü–µ—Ä–µ–≤–µ–¥–∏:\n{sentence}',
                                     reply_markup=ReplyKeyboardRemove())
                await update_last_sentence(message.from_user.id, sentence)

        else:
            await message.answer('‚ùå –•–º, —É –º–µ–Ω—è –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç ü§î')
            await message.answer('<u>–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑</u> –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç üòâ',
                                 reply_markup=kb_training_in_game_inline)
    except KeyError:
        await message.answer('‚ùå –•–º, —É –º–µ–Ω—è –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç ü§î')
        await message.answer('<u>–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑</u> –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç üòâ',
                             reply_markup=kb_training_in_game_inline)


#################################### –ò–ó–£–ß–ï–ù–ò–ï –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –ì–õ–ê–ì–û–õ–û–í ####################################
@user_router.callback_query(F.data == '–ò–∑—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤')
async def verbs_start(callback: CallbackQuery, state: FSMContext):
    done_lst_verbs = await get_progress_verbs(callback.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∏–∑ –ë–î
    level = await get_or_edit_verbs_level(callback.from_user.id)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ë–î
    main_dict = dict_dicts['verbs']  # —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    await callback.answer()
    await callback.message.edit_text(
        f'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n–ë—É–¥–µ–º —É—á–∏—Ç—å <b>–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã</b>\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ - –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –ø—Ä–∞–≤–∏–ª–∞',
        reply_markup=kb_verbs_rules_inline)
    await callback.message.answer(
        f'–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}\n–í—ã—É—á–µ–Ω–æ {len(done_lst_verbs)}\n–í—Å–µ–≥–æ {len(main_dict)}',
        reply_markup=ReplyKeyboardRemove())
    verb = random.choice(
        [s for s in list(main_dict.values()) if s not in done_lst])
    await callback.message.answer(f'–ù–∞–ø–∏—à–∏ —Ç—Ä–∏ —Ñ–æ—Ä–º—ã –≥–ª–∞–≥–æ–ª–∞:\n<b>{verb.capitalize()}</b>',
                                  reply_markup=kb_in_verbs_inline)
    await update_last_verb(callback.from_user.id, verb)
    await state.set_state(FSMtraining.in_process_verbs)


@user_router.message(StateFilter(FSMtraining.in_process_verbs))
async def check_translation_verbs(message: Message, state: FSMContext):
    verb = await get_last_verb(message.from_user.id)
    done_lst_verbs = await get_progress_verbs(message.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∏–∑ –ë–î
    level = await get_or_edit_verbs_level(message.from_user.id)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ë–î
    main_dict = dict_dicts['verbs']  # —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    if message.text is not None:
        msg = message.text.lower()
    else:
        msg = ''
    try:
        if main_dict[msg].lower() == verb.lower():  # –ø–µ—Ä–µ–≤–æ–¥ –≤–µ—Ä–Ω—ã–π
            done_lst_verbs.append(verb)  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª –≤ —Å–ø–∏—Å–æ–∫ done
            await update_progress_verbs(message.from_user.id, done_lst_verbs)  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤ –ë–î
            await message.answer(random.choice(list_right_answers))  # –ø–∏—à–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–ª–æ–¥–µ—Ü))
            if len(done_lst_verbs) == len(main_dict):  # –í—Å–µ –∏–∑—É—á–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª —É—Ä–æ–≤–µ–Ω—å {level}!')
                level = await get_or_edit_verbs_level(message.from_user.id,
                                                      edited=True)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–î –∏–Ω—Ñ—É, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –≤—ã–ø–æ–ª–Ω–µ–Ω
                done_lst_verbs = []  # –æ–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                await update_progress_verbs(message.from_user.id)  # –æ–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤ –ë–î
                await message.answer(f"""–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}""")
                verb = random.choice(
                    [s for s in list(main_dict.values()) if s not in done_lst_verbs])
                await message.answer(f'–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n<b>{verb.capitalize()}</b>',
                                     reply_markup=kb_in_verbs_inline)
                await update_last_verb(message.from_user.id, verb)
            else:  # –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–µ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ
                verb = random.choice([
                    s for s in list(main_dict.values()) if s not in done_lst_verbs
                ])  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
                await message.answer(f'–ü–µ—Ä–µ–≤–µ–¥–∏:\n<b>{verb.capitalize()}</b>', reply_markup=kb_in_verbs_inline)
                await update_last_verb(message.from_user.id, verb)

        else:
            await message.answer('‚ùå –•–º, —É –º–µ–Ω—è –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç ü§î')
            await message.answer('<u>–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑</u> –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç üòâ',
                                 reply_markup=kb_in_verbs_fail_inline)
    except KeyError:
        await message.answer('‚ùå –•–º, —É –º–µ–Ω—è –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç ü§î')
        await message.answer('<u>–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑</u> –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç üòâ',
                             reply_markup=kb_in_verbs_fail_inline)


@user_router.callback_query(F.data == '–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≥–æ–ª')
async def show_answer_verbs(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    done_lst_verbs = await get_progress_verbs(callback.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∏–∑ –ë–î
    verb = await get_last_verb(callback.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–ª–∞–≥–æ–ª –∏–∑ –ë–î
    main_dict = dict_dicts['verbs']  # —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    inv_dict = {value: key for key, value in main_dict.items()}
    await callback.message.edit_text(f'–û—Ç–≤–µ—Ç:\n\n{(inv_dict[verb]).capitalize()}')
    verb = random.choice(
        [s for s in list(main_dict.values()) if s not in done_lst_verbs])
    await update_last_verb(callback.from_user.id, verb)
    await callback.message.answer('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üòä')
    await callback.message.answer(f'–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n<b>{verb.capitalize()}</b>', reply_markup=kb_in_verbs_inline)


@user_router.callback_query(F.data == '–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≥–æ–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ')
async def show_answer_verbs(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    done_lst_verbs = await get_progress_verbs(callback.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∏–∑ –ë–î
    verb = await get_last_verb(callback.from_user.id)  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–ª–∞–≥–æ–ª –∏–∑ –ë–î
    main_dict = dict_dicts['verbs']  # —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    inv_dict = {value: key for key, value in main_dict.items()}
    await callback.message.edit_text(f'–û—Ç–≤–µ—Ç:\n\n{(inv_dict[verb]).capitalize()}')
    verb = random.choice(
        [s for s in list(main_dict.values()) if s not in done_lst_verbs])
    await update_last_verb(callback.from_user.id, verb)
    await callback.message.answer(
        f'–ù–∞ –æ—à–∏–±–∫–∞—Ö —É—á–∞—Ç—Å—è, —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º üòä')
    await callback.message.answer(f'–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n<b>{verb.capitalize()}</b>', reply_markup=kb_in_verbs_inline)


@user_router.callback_query(F.data == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥–ª–∞–≥–æ–ª—ã')
async def see_rules_verbs(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        text='''–ü—Ä–∞–≤–∏–ª–∞ —Å–ª–µ–¥—É—é—â–∏–µ:\n–Ø –ø–∏—à—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Ç—ã –ø–∏—à–µ—à—å —Ç—Ä–∏ —Ñ–æ—Ä–º—ã –≥–ª–∞–≥–æ–ª–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
–ï—Å–ª–∏ —É —Ñ–æ—Ä–º—ã –≥–ª–∞–≥–æ–ª–∞ –µ—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è, —Ç–æ –ø–∏—à–∏ —á–µ—Ä–µ–∑ slash(/).\n–ù–∞–ø—Ä–∏–º–µ—Ä:
<b>take took taken</b>
<b>be was/were been</b>\n<b>spell spelt/spelled spelt/spelled</b>\n\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥—É—Ç:
‚ö™ –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –µ—â—ë —Ä–∞–∑\n‚ö™ –ú–æ–∂–µ—à—å –ø–æc–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç¬ª''')


#################################### –ò–ó–£–ß–ï–ù–ò–ï –ù–û–í–´–• –°–õ–û–í ####################################
@user_router.callback_query(F.data == '–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞')
@user_router.callback_query(F.data == '–ü–æ–Ω—è—Ç–Ω–æ')
async def new_words_main_menu(callback: CallbackQuery, state: FSMContext):
    DICT = {str(key): str(key) for key, value in words_dict.items()}
    await state.set_state(FSMtraining.in_process_new_words)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å',
                                     reply_markup=create_inline_kb_words(2, True, True, last_btn='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                                         **DICT))


@user_router.message(StateFilter(FSMtraining.in_process_new_words))
async def new_words_main_menu_in_process(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text()


@user_router.callback_query(F.data == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–ª–æ–≤–∞')
async def see_rules_training(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        text=f"""–Ø –∏—Å–ø–æ–ª—å–∑—É—é —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
\n‚ö™ –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —á–∞—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—à—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —è –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º –≤—Å—ë —Ä–µ–∂–µ –∏ —Ä–µ–∂–µ
\n‚ö™ –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å—Å—è —Ç—è–∂–µ–ª–æ, —è –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç—ã –∏—Ö –Ω–µ –∑–∞–ø–æ–º–Ω–∏—à—å""",
        reply_markup=create_inline_kb_words(1, –ü–æ–Ω—è—Ç–Ω–æ='–ü–æ–Ω—è—Ç–Ω–æ'))


@user_router.message()
async def send_idontknow(message: Message):
    await message.reply(
        f'{message.from_user.first_name}, —è –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—åü§∑üèº‚Äç‚ôÄ'
    )
